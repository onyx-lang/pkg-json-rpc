#load "./lib/json/module"
#load "./module"

use core {package, *}
use json
use json_rpc { package, JC :: Context, Method, Status, Notification }

Input :: struct {
    @json_rpc.Param_Description.{"Dummy description"}
    param1: str;
    @json_rpc.Param_Summary.{"Dummy summary"}
    param2: u32;
}

Output :: struct {
    value: u32;
    desc: str;
}

@Method.{
    "test",
    summary = "A simple test method.",
    description = "A long description of what is said before"
}
(_: ^JC, input: ^Input, output: ^Output) -> Status {
    printf("{*p}\n", input);
    
    *output = .{
        value = input.param2 * 2,
        desc = "Double param2"
    };

    return .Success;
}

@Notification.{
    "notify"
}
(_: ^JC, test: ^i32) {
    printf("Working notification: {*}\n", test);
}

main :: () {
    server := json_rpc.handler();

    server->set_metadata("example-server", "A simple example server with 1 method.", "0.0.1");
    server->collect_methods(.[#this_package]);
    server->enable_openrpc_discovery();

    server->set_output_callback(null, (_, msg) => {
        println(msg);
    });

    server->handle("""{
        "jsonrpc": "2.0",
        "method": "test",
        "params": { "param1": "Woot!", "param2": 10 },
        "id": 1
    }""");

    server->handle("""{
        "jsonrpc": "2.0",
        "method": "test",
        "params": [ "Some longer test case because why not :)", 40 ],
        "id": 1
    }""");

    server->handle("""{
        "jsonrpc": "2.0",
        "method": "notify",
        "params": [1234],
    }""");

    server->send_notification("test", ^.{ asdf=1234 });
    
    // server->handle("""{
    //     "jsonrpc": "2.0",
    //     "method": "rpc.discover",
    //     "params": [],
    //     "id": 1
    // }""", ^core.stdio.print_writer);

}

